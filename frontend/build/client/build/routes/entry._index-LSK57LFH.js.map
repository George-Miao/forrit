{
  "version": 3,
  "sources": ["../../../app/routes/entry._index.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/entry._index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/entry._index.tsx\");\n  import.meta.hot.lastModified = \"1726432824163.6538\";\n}\n// REMIX HMR END\n\nimport { useEntryList } from 'app/client';\nimport WidthLimit from 'app/components/width_limit';\nimport LoadingInfinite from 'app/components/loading_infinite';\nimport PageHeader from 'app/components/page_header';\nimport { List, Typography } from '@douyinfe/semi-ui';\nimport Text from '@douyinfe/semi-ui/lib/es/typography/text';\nimport EntryListItem from 'app/components/entry_list/item';\nimport { extract_entry } from 'app/util';\nconst {\n  Title\n} = Typography;\nexport default function Entry() {\n  _s();\n  return <>\n      <PageHeader routes={[{\n      href: '/',\n      name: '\u9996\u9875'\n    }, {\n      name: '\u66F4\u65B0'\n    }]}>\n        <Title type='secondary' style={{\n        margin: '2em 0 1em'\n      }}>\n          \u66F4\u65B0\n        </Title>\n      </PageHeader>\n      <WidthLimit>\n        <List style={{\n        width: '100%'\n      }} emptyContent={<Text type='tertiary' style={{\n        display: 'block',\n        marginTop: '2em'\n      }}>\n              \u6682\u65E0\u8D44\u6E90\n            </Text>}>\n          <LoadingInfinite useData={useEntryList()}>\n            {data => <>\n                {data.map(item => <EntryListItem key={item._id.$oid} item={extract_entry(item)} show_meta />)}\n              </>}\n          </LoadingInfinite>\n        </List>\n      </WidthLimit>\n    </>;\n}\n_s(Entry, \"5jbUC9Tr1W1/rwPp1iUPGuwOogI=\", false, function () {\n  return [useEntryList];\n});\n_c = Entry;\nvar _c;\n$RefreshReg$(_c, \"Entry\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCQ;AAxCR,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,kCAAoC,EAAE;AAAA,EAC/E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA6B;AAC7B,cAAY,IAAI,eAAe;AACjC;AAWA,IAAM;AAAA,EACJ;AACF,IAAI;AACW,SAAR,QAAyB;AAC9B,KAAG;AACH,SAAO,sFACH;AAAA,uDAAC,cAAW,QAAQ,CAAC;AAAA,MACrB,MAAM;AAAA,MACN,MAAM;AAAA,IACR,GAAG;AAAA,MACD,MAAM;AAAA,IACR,CAAC,GACG,6DAAC,SAAM,MAAK,aAAY,OAAO;AAAA,MAC/B,QAAQ;AAAA,IACV,GAAG,4BAFD;AAAA;AAAA;AAAA;AAAA,WAIA,KAVF;AAAA;AAAA;AAAA;AAAA,WAWA;AAAA,IACA,mDAAC,cACC,6DAAC,gBAAK,OAAO;AAAA,MACb,OAAO;AAAA,IACT,GAAG,cAAc,mDAAC,QAAK,MAAK,YAAW,OAAO;AAAA,MAC5C,SAAS;AAAA,MACT,WAAW;AAAA,IACb,GAAG,wCAHc;AAAA;AAAA;AAAA;AAAA,WAKX,GACF,6DAAC,mBAAgB,SAAS,aAAa,GACpC,oBAAQ,sFACJ,eAAK,IAAI,UAAQ,mDAAC,iBAAkC,MAAM,cAAc,IAAI,GAAG,WAAS,QAAnD,KAAK,IAAI,MAA7B;AAAA;AAAA;AAAA;AAAA,WAAwE,CAAE,KADvF;AAAA;AAAA;AAAA;AAAA,WAEP,KAHJ;AAAA;AAAA;AAAA;AAAA,WAIA,KAZF;AAAA;AAAA;AAAA;AAAA,WAaA,KAdF;AAAA;AAAA;AAAA;AAAA,WAeA;AAAA,OA5BG;AAAA;AAAA;AAAA;AAAA,SA6BL;AACJ;AACA,GAAG,OAAO,gCAAgC,OAAO,WAAY;AAC3D,SAAO,CAAC,YAAY;AACtB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,OAAO;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
