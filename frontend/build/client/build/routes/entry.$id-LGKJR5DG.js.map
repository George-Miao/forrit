{
  "version": 3,
  "sources": ["../../../app/routes/entry.$id.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/entry.$id.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/entry.$id.tsx\");\n  import.meta.hot.lastModified = \"1726381156963.9412\";\n}\n// REMIX HMR END\n\nimport { json } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { useExtractedEntry } from 'app/client';\nimport Loading from 'app/components/loading';\nimport PageHeader from 'app/components/page_header';\nexport async function loader({\n  params\n}) {\n  return json({\n    id: params.id\n  });\n}\nexport default function EntryDetail() {\n  var _s = $RefreshSig$();\n  function useData() {\n    _s();\n    const id = useLoaderData().id;\n    return useExtractedEntry(id);\n  }\n  _s(useData, \"LO+aI6Xt3HnHbgEd6YlRnS4yelM=\", false, function () {\n    return [useLoaderData, useExtractedEntry];\n  });\n  return <Loading size='large' useData={useData}>\n      {data => <Loaded entry={data} />}\n    </Loading>;\n}\n_c = EntryDetail;\nfunction Loaded({\n  entry\n}) {\n  return <>\n      <PageHeader routes={[{\n      href: '/',\n      name: '\u9996\u9875'\n    }, {\n      href: '/entry',\n      name: '\u66F4\u65B0'\n    }, {\n      name: entry.title\n    }]}>\n        {entry.title}\n      </PageHeader>\n    </>;\n}\n_c2 = Loaded;\nvar _c, _c2;\n$RefreshReg$(_c, \"EntryDetail\");\n$RefreshReg$(_c2, \"Loaded\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,kBAAqB;AAuBN;AA1Cf,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,+BAAiC,EAAE;AAAA,EAC5E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAON,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA0B;AAC1B,cAAY,IAAI,eAAe;AACjC;AAee,SAAR,cAA+B;AACpC,MAAI,KAAK,aAAa;AACtB,WAAS,UAAU;AACjB,OAAG;AACH,UAAM,KAAK,cAAc,EAAE;AAC3B,WAAO,kBAAkB,EAAE;AAAA,EAC7B;AACA,KAAG,SAAS,gCAAgC,OAAO,WAAY;AAC7D,WAAO,CAAC,eAAe,iBAAiB;AAAA,EAC1C,CAAC;AACD,SAAO,mDAAC,WAAQ,MAAK,SAAQ,SACxB,oBAAQ,mDAAC,UAAO,OAAO,QAAf;AAAA;AAAA;AAAA;AAAA,SAAqB,KAD3B;AAAA;AAAA;AAAA;AAAA,SAEL;AACJ;AACA,KAAK;AACL,SAAS,OAAO;AAAA,EACd;AACF,GAAG;AACD,SAAO,sFACH,6DAAC,cAAW,QAAQ,CAAC;AAAA,IACrB,MAAM;AAAA,IACN,MAAM;AAAA,EACR,GAAG;AAAA,IACD,MAAM;AAAA,IACN,MAAM;AAAA,EACR,GAAG;AAAA,IACD,MAAM,MAAM;AAAA,EACd,CAAC,GACI,gBAAM,SATT;AAAA;AAAA;AAAA;AAAA,SAUA,KAXG;AAAA;AAAA;AAAA;AAAA,SAYL;AACJ;AACA,MAAM;AACN,IAAI;AAAJ,IAAQ;AACR,aAAa,IAAI,aAAa;AAC9B,aAAa,KAAK,QAAQ;AAE1B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
