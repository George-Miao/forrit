{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/react-swr-infinite-scroll@1.0.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/src/components/InfiniteScroll/index.tsx", "../../../app/components/loading_infinite.tsx"],
  "sourcesContent": ["import React, { Ref, useEffect, useState } from 'react'\nimport type { SWRInfiniteResponse } from 'swr'\n\ntype Props<T> = {\n  swr: SWRInfiniteResponse<T>\n  children: React.ReactChild | ((item: T) => React.ReactNode)\n  loadingIndicator?: React.ReactNode\n  endingIndicator?: React.ReactNode\n  isReachingEnd: boolean | ((swr: SWRInfiniteResponse<T>) => boolean)\n  offset?: number\n}\n\nconst useIntersection = <T extends HTMLElement>(): [boolean, Ref<T>] => {\n  const [intersecting, setIntersecting] = useState<boolean>(false)\n  const [element, setElement] = useState<HTMLElement>()\n  useEffect(() => {\n    if (!element) return\n    const observer = new IntersectionObserver((entries) => {\n      setIntersecting(entries[0]?.isIntersecting)\n    })\n    observer.observe(element)\n    return () => observer.unobserve(element)\n  }, [element])\n  return [intersecting, (el) => el && setElement(el)]\n}\n\nconst InfiniteScroll = <T,>(props: Props<T>): React.ReactElement<Props<T>> => {\n  const {\n    swr,\n    swr: { setSize, data, isValidating },\n    children,\n    loadingIndicator,\n    endingIndicator,\n    isReachingEnd,\n    offset = 0,\n  } = props\n\n  const [intersecting, ref] = useIntersection<HTMLDivElement>()\n\n  const ending = typeof isReachingEnd === 'function' ? isReachingEnd(swr) : isReachingEnd\n\n  useEffect(() => {\n    if (intersecting && !isValidating && !ending) {\n      setSize((size) => size + 1)\n    }\n  }, [intersecting, isValidating, setSize, ending])\n\n  return (\n    <>\n      {typeof children === 'function' ? data?.map((item) => children(item)) : children}\n      <div style={{ position: 'relative' }}>\n        <div ref={ref} style={{ position: 'absolute', top: offset }}></div>\n        {ending ? endingIndicator : loadingIndicator}\n      </div>\n    </>\n  )\n}\n\nexport default InfiniteScroll\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/loading_infinite.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/loading_infinite.tsx\");\n  import.meta.hot.lastModified = \"1726366494033.7554\";\n}\n// REMIX HMR END\n\nimport { Spin } from '@douyinfe/semi-ui';\nimport InfiniteLoader from 'react-swr-infinite-scroll';\nexport default function LoadingInfinite({\n  useData: data,\n  children\n}) {\n  const has_next_page = data.data?.[data.data.length - 1]?.page_info.has_next_page;\n  return <InfiniteLoader swr={data} isReachingEnd={has_next_page === false} loadingIndicator={<Spin style={{\n    display: 'block',\n    margin: '4em auto'\n  }} />} offset={-300}>\n      {data => data && children(data.items)}\n    </InfiniteLoader>;\n}\n_c = LoadingInfinite;\nvar _c;\n$RefreshReg$(_c, \"LoadingInfinite\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["props", "swr", "_a", "setSize", "data", "isValidating", "children", "loadingIndicator", "endingIndicator", "isReachingEnd", "_b", "offset", "_c", "useState", "intersecting", "setIntersecting", "element", "setElement", "useEffect", "observer", "IntersectionObserver", "entries", "e", "isIntersecting", "observe", "unobserve", "el", "useIntersection", "ref", "ending", "size", "React", "map", "item", "style", "position", "top", "data"]
}
